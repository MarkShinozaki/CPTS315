# -*- coding: utf-8 -*-
"""PredictiveNYCLotteryWins.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lXKtOiqjFEzhLYFOIVJcpb6hWCy_c_B3
"""

from google.colab import drive 
drive.mount("/content/drive")

# Load data into DataFrames
MEGA = pd.read_csv('Lottery_Mega_Millions_Winning_Numbers__Beginning_2002.csv')
POWER = pd.read_csv('Lottery_Powerball_Winning_Numbers__Beginning_2010.csv')

# Not sure if this imports correctly with the file paths but this was done in colab

# importing pandas
# importing Tensor
# importing torch
import pandas as pd
import tensorflow as tf
from torch import nn 
import sklearn
import numpy as np
from sklearn import linear_model
import matplotlib.pyplot as plt

# Linear Regression 
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Reading the dataset - Mega Millions Winnings
MEGA=pd.read_csv("/content/drive/MyDrive/Datasets/Lottery_Mega_Millions_Winning_Numbers__Beginning_2002 (1).csv")

# Reading the dataset - Powerball_Winning Numbers
POWER=pd.read_csv("/content/drive/MyDrive/Datasets/Lottery_Powerball_Winning_Numbers__Beginning_2010 (1).csv")

# dimensions Mega Millions Winnings
MEGA.shape

# dimensions - Power ball Winnings
POWER.shape

# head of the dataset - Mega Millions Winnings 
MEGA.head(7)

# head of the dataset - Power ball winnings 
POWER.head(7)

#identifying categorical (Objects) and Continous variables (Int, Float) - MEGA Millions
MEGA.dtypes

#identifying categorical (Objects) and Continous variables (Int, Float) - MEGA Millions
POWER.dtypes

# extracting the winning numbers column FOR POWER BALL
POWER_NUMS = POWER['Winning Numbers'].str.split(expand=True).astype(int)

# Building a linear regression model with the last 5 columns of POWER_NUMS as input
POWER_MODEL = LinearRegression()
POWER_MODEL.fit(POWER_NUMS.iloc[:-1, -5:], POWER_NUMS.iloc[1:, -5:])

# Predict the next Power Ball values
NEXT_POWER = POWER_MODEL.predict(POWER_NUMS.iloc[-2:-1, :-1])
# round the predicted numbers to the nearest integer
NEXT_POWER = np.round(NEXT_POWER)
print("Next Power Ball numbers:", NEXT_POWER)

# Evaluate performance of the model using mean squared error 
POWER_PREDICT = POWER_MODEL.predict(POWER_NUMS.iloc[:-1, -5:])
POWER_MSE = mean_squared_error(POWER_NUMS.iloc[1:, -5:], POWER_PREDICT)
print("Power Ball MSE:", POWER_MSE)

# get the winning numbers column
winning_numbers = POWER['Winning Numbers']

# create a dictionary to count the occurrences of each number
number_counts = {}
for numbers in winning_numbers:
    for number in numbers.split():
        number_counts[number] = number_counts.get(number, 0) + 1

# sort the dictionary by the counts in descending order
sorted_counts = sorted(number_counts.items(), key=lambda x: x[1], reverse=True)

# extract the top 10 most common numbers and their counts
top_10_numbers = [int(x[0]) for x in sorted_counts[:10]]
top_10_counts = [x[1] for x in sorted_counts[:10]]

# create a bar chart
plt.bar([str(x) for x in top_10_numbers], top_10_counts)
plt.title('Most Common Power Ball Numbers')
plt.xlabel('Numbers')
plt.ylabel('Counts')
plt.show()

# extracting the winning numbers column FOR MEGA BALL
MEGA_NUMS = MEGA['Winning Numbers'].str.split(expand=True).astype(int)

# extracting the winning numbers column for MEGA BALL
MEGA_NUMS = MEGA['Winning Numbers'].str.split(expand=True).astype(int)

# extract Mega Ball numbers
MEGA_BALL = MEGA_NUMS.iloc[:, -1:].astype(int)

# drop Mega Ball from the dataset
MEGA_NUMS = MEGA_NUMS.iloc[:, :-1]

# Building a linear regression model with the last 5 columns of MEGA_NUMS and Mega Ball as input
MEGA_MODEL = LinearRegression()
MEGA_MODEL.fit(MEGA_NUMS.iloc[:-1, -5:].join(MEGA_BALL.iloc[:-1]), MEGA_NUMS.iloc[1:, -5:].join(MEGA_BALL.iloc[1:]))

# Predict the next Mega Ball value
NEXT_MEGA_BALL = MEGA_MODEL.predict(MEGA_NUMS.iloc[-2:-1, -5:].join(MEGA_BALL.iloc[-2:-1]))
# round the predicted numbers to the nearest integer
NEXT_MEGA_BALL = np.round(NEXT_MEGA_BALL)
print("Next MEGA Ball Lottery numbers:", NEXT_MEGA_BALL[0])

# Evaluate performance of the model using mean squared error
MEGA_PREDICT = MEGA_MODEL.predict(MEGA_NUMS.iloc[:-1, -5:].join(MEGA_BALL.iloc[:-1]))
MEGA_MSE = mean_squared_error(MEGA_NUMS.iloc[1:, -5:].join(MEGA_BALL.iloc[1:]), MEGA_PREDICT)
print("MEGA Ball  MSE:", MEGA_MSE)

# get the winning numbers column
winning_numbers = MEGA['Winning Numbers']

# create a dictionary to count the occurrences of each number
number_counts = {}
for numbers in winning_numbers:
    for number in numbers.split():
        number_counts[number] = number_counts.get(number, 0) + 1

# sort the dictionary by the counts in descending order
sorted_counts = sorted(number_counts.items(), key=lambda x: x[1], reverse=True)

# extract the top 10 most common numbers and their counts
top_10_numbers = [int(x[0]) for x in sorted_counts[:10]]
top_10_counts = [x[1] for x in sorted_counts[:10]]

# create a bar chart
plt.bar([str(x) for x in top_10_numbers], top_10_counts)
plt.title('Most Common Power Ball Numbers')
plt.xlabel('Numbers')
plt.ylabel('Counts')
plt.show()

# This code creates a list winning_numbers that includes all the winning numbers, 
# Create a list to store all the winning numbers including Mega Ball values
winning_numbers = []
for i, row in MEGA.iterrows():
    numbers = row['Winning Numbers'].split(' ')
    mega_ball = row['Mega Ball']
    numbers.append(str(mega_ball))  # Append Mega Ball value to the list of winning numbers
    winning_numbers.append(numbers)

# Flatten the list of winning numbers
winning_numbers_flat = [number for sublist in winning_numbers for number in sublist]

# Create a dictionary to count the occurrences of each number
number_counts = {}
for number in winning_numbers_flat:
    number_counts[number] = number_counts.get(number, 0) + 1

# Sort the dictionary by the counts in descending order
sorted_counts = sorted(number_counts.items(), key=lambda x: x[1], reverse=True)

# Extract the top 10 most common numbers and their counts
top_10_numbers = [int(x[0]) for x in sorted_counts[:10]]
top_10_counts = [x[1] for x in sorted_counts[:10]]

# Create a bar chart
plt.bar(top_10_numbers, top_10_counts)
plt.title('Most Common Mega Ball Numbers')
plt.xlabel('Numbers')
plt.ylabel('Counts')
plt.show()